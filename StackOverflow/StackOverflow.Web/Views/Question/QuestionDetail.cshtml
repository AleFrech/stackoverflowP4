@using StackOverflow.Web.Controllers
@model StackOverflow.Web.Controllers.QuestionDetailModel


<div>
    <hr />
    <dl class="dl-horizontal">
        <div class="row">
            <a href="@Url.Action("UpVote", "Question", new {ID = Model.QuestionId})">

                <img src="http://www.clker.com/cliparts/z/z/h/C/V/5/up-white-arrow-hi.png" style="height: 32px; width: 32px">
            </a>
            <a href="@Url.Action("DownVote", "Question", new {ID = Model.QuestionId})">

                <img src="http://i.imgur.com/c345P37.png?1" style="height: 32px; width: 32px;">
            </a>
        </div>
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Decription)
        </dt>

        <dd>
            <div style="word-wrap: break-word;">
                @Html.DisplayFor(model => model.Decription)
            </div>
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Votes)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Votes)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Answers)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Answers)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Views)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Views)
        </dd>

    </dl>
</div>
@Html.ActionLink("Back to Questions", "Index") | @Html.ActionLink("Delete Question", "DeleteQuestion", new { ID = Model.QuestionId }, null)

@{ Html.RenderAction("CommentIndex", "Comment", new { Fid = Model.QuestionId });}
<div class="row">

    @if (Context.User.Identity.IsAuthenticated)
    {
        using (Html.BeginForm("CreateComment", "Comment", new {Fid = Model.QuestionId.ToString()}))
        {
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                <div class="form-group">
                    @Html.LabelFor(model => model.CreateComment, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.CreateComment, new {htmlAttributes = new {@class = "form-control"}, style = "width:500px; height:40px;"})
                        @Html.ValidationMessageFor(model => model.CreateComment, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default"/>
                    </div>
                </div>
            </div>
        }
    }
</div>
<hr/>

<div class="row">
    @{ Html.RenderAction("AnswerIndex", "Answer", new {qID = Model.QuestionId});}
</div>

<hr/>
<div class="row">

    @if (Context.User.Identity.IsAuthenticated)
    {
        using (Html.BeginForm("CreateAnswer", "Answer",new{qID=Model.QuestionId.ToString()}))
        {
              <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.CreateAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.CreateAnswer, new { htmlAttributes = new { @class = "form-control" }, style = "width:500px; height:100px;" })@if (TempData["AnswerBelow5word"] != null)
                                                                                                                                                                      {
                                                                                                                                                                          @Html.Label("*"+TempData["AnswerBelow5word"].ToString(),htmlAttributes:new{style="color: red"})
                                                                                                                                                                      }
                        @Html.ValidationMessageFor(model => model.CreateAnswer, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    }
</div>

